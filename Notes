#Forum

1.  Thread
2.  Reply
3.  User

A.  Thread is created by a User
B.  A reply belongs to a thread, and belongs to a user.


Create model Thread and Reply with resource controller.
Added Migration fields and Factory for Thread using a function to generate the user in the thread since they both have a relationship.
// $threads = factory('App\Thread', 50)->create()
for each thread we will create 10 different replies and we also want to associate the replies to the thread id.
// $threads->each(function($thread) { factory('App\Reply', 10)->create(['thread_id' => $thread->id]);});


If you don't want to inline all your seeding then you can create a seeder and put all the calling of factory in your seeder instead of the command line.

Just like so:
php artisan make:seeder ThreadsTableWithReplySeeder
Then in your file, write the code in the run method:



public function run()
{
$threads = factory('App\Thread', 50)->create();

$threads->each(function($thread) { factory('App\Reply', 10)->create(['thread_id' => $thread->id]);});
}

2.  Renamed controllers by pluralizing it. Started setUp for testing by renaming ExampleTest to ThreadsTest
    Change the database to use sqlite for testing in phpunit.xml
    then pull in the database migration by using a namespace
    By ctrl cliking the databaseMigrations within the class we are taken to the trait definition for further inspection

./vendor/bin/phpunit --version

To run the test we must follow this path.
./vendor/bin/phpunit

After running this it should fail becuse we dont have a route file for it. Hence the need to create one.

The difference between a featured test and unit test is that for feature test we are testing to make sure
that a feature works the way it is suppose to work i.e. it display the correct result.

unit test on the other hand refers to making calls to methods and classes to make sure that they perform or
achieve the task they are suppose to.

Switched things up a little bit by creating another sqlite database and seting the path in phpunit.xml
which I will be using for test as the memory one is not working.

3.  Adding the replies to a thread along side the user who replied a thread. We have to set relationships
    between the thread and the user as well as using unit testing instead of feature testing to get specific 
    errors with a bit of refactoring our code base.

    NB: The way we used Reply::class as a relationship in thread model.

4.   Refactor the view to a partial called reply.blade.php and included it in show. 
    Stopped writing test for the solution to enable me finish faster. Refactored the code to make sure that only authentocated user can 
    post a reply by adding middleware to the solution.

5.  We want to create a form to enable us add reply. We can use auth->check() to make sure that only signed users have access to the form   
    in the view to add replies.

8.  Refactored the code to use resource route.

9.  A thread should be assigned to a channel. We created a channel model, created migration and relationship because a thread belongs to a channel
    then  in the thread migration table we create an unsignedInteger integer for the channel so the relationship is complete. Finally we refactor the
    path method to include the channel and the slug.  We did migrate:refresh to refresh our database so that a thread belongs to a channel as well as
    the refactoring of user factory to contain channel and while we are creating a thread we also create a channel so that the relationship is complete
    
    
    Changed back to normal route instead of resource route especially for a single thread where I included a channel before the thread id.
    we also need to change the parameter in the show method of the thread controller to match the route. We do the same for replies controller
    add additional paameter to the replies store method ($channeId) in this case and well as the route.

10.  Adding Validation

11.   A user can filter thread by chanel. Refactored index method of the threadcontroller to return all thread with a channelSlug if there is a one 
      else return just threads without the channelslug.  We also filter by saying channel where the slug is equal to channelSlug so we grab the first
      and also we get the if and store in a variable called channelId. Remmember to import the app/channel.

      We refactored the index method and in the channel model we tell laravel to use the slug as the key by overriding the getRouteKeyName method.
      We also create a relationship between a channel and a thread. A channel can have many threads (one to many relationship).
      Added a menu to create a new thread using bootsrap 4 and display all threads menu too.

12.   Now we need to add validation and probably display errors while trying to use the form for the create a new thread. We also add the old data by adding
        a helper in the view {{ old('title') }} and {{ old('body') }} for title so that it can remember the last thing that was posted.
      Included the $request object before doing validation else it wont work on the store method. I forgot so I had to put it back for it to work.
      Then we include the validation error underneath the submit button formatting it with a bootstrap class.

      we can use the code // dd(request()->all()); to check if our form is submitting.

      Added browser validation as well as reselecting the option selected in the dropdown if there is an error in the other fields.

13.   Removed the code from the view and move it to a view composer as well as charing it with all the views created. This makes our view clean.

14.     A user can filter threads by username. So we refactor the code by removing the get() and including the get() at the bottom after adding that a logged in user
        can filter threads created by himself.

15.    Refactoring of the code.
        First of we refactor the index method into a getThreads method and call it in index.
        We will create a dedicated filtering class such that whenever we want to do some filtering based on different category we can just do it there

        So we create a folder in the apps directory and call it Filters inside of which we will have our ThreadsFilter.php class.
        Then we inject the filters as a parameter as well as referencing the namespace so we can filter based on different parameter.

        In the thread model we will add a method called scopeFilter where we accept a set of query scope filters that will accept the query
        and then pass that through to the filters. What this means is that from the thread controller in the index method, we are calling Thread::filters
        meaning filter it down according to the passed in parameter filter in the index method then get it and store in $threads.

        Now we create the apply method in the threadsfilter class and pass in a query builder parameter to help us. So we go the the getThreads method in the 
        controller and move out a portion of the code to the apply method. i.e. the request by portion. and we also create a constructor
        to pass in the request while also creating a field. We also reference the Request namespace. 

        We delete the getThreads method and take the code back to index method as part of our refactoring. Comment out the code we moves to the 
        apply method. Then we call the filter method and filter according to the filter we injected in the index method and get the result.

        We continue the refactoring by extracting a method called by to hold the criteria i.e. get all threads where the user id is equal this one.

        We refactored the threadfilter to have an abstract class. 
        Committed to git and continued refactoring. 
        Instead of hard coding the by() method we are refactoring to use a loop to get the exact criteria to use for filtering. 
        as well as checking if the request has the filter then only in that case should we filter it down.
        Finally we refactor everything into a method called hasFilter and call it in the apply method above.
        Did more refactoring by changing hasFilters to getFilters and moved around the code.

        Refactor the index method of the threads controller to have a method called get threads.

16.     UI works. As well as displaying the creator of the thread and the replies count. In the controller I am going to comment out 
        other ways to achieve this in the show method.

        Added a boot method and it says for all the queries of thread we need you to include replies in this particular scope. Which is 
        to include replies count. This method is known as using global query scope


        












